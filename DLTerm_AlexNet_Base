{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5048,"databundleVersionId":868335,"sourceType":"competition"}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**Importing Library**","metadata":{}},{"cell_type":"code","source":"import os\nimport numpy as np\nimport cv2\nimport random\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.utils import to_categorical","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T16:46:15.893283Z","iopub.execute_input":"2024-11-12T16:46:15.893754Z","iopub.status.idle":"2024-11-12T16:46:26.836855Z","shell.execute_reply.started":"2024-11-12T16:46:15.893712Z","shell.execute_reply":"2024-11-12T16:46:26.835452Z"}},"outputs":[],"execution_count":3},{"cell_type":"markdown","source":"**Loading Data**","metadata":{}},{"cell_type":"code","source":"# 경로 설정\ntrain_path = '/kaggle/input/state-farm-distracted-driver-detection/imgs/train'\ntest_path = '/kaggle/input/state-farm-distracted-driver-detection/imgs/test'    # 제출용 테스트 데이터 경로\n\n# 데이터 불러오기\nclass_labels = []\nimages = []\n\n# 클래스별로 이미지 불러오기\nfor class_index in range(10):\n    class_path = os.path.join(train_path, f'c{class_index}')  # 경로 수정\n    files = os.listdir(class_path)\n    print(f\"Class {class_index}에 대한 파일 수: {len(files)}\")\n\n    for filename in tqdm(files, desc=f'Processing class {class_index}'):\n        image_path = os.path.join(class_path, filename)\n        img = cv2.imread(image_path)\n        img = cv2.resize(img, (100, 100)) / 255.0  # Normalize to 0-1\n        images.append(img)\n        class_labels.append(class_index)\n\n# numpy 배열로 변환\nimages = np.array(images)\nclass_labels = np.array(class_labels)\nprint(f\"총 이미지 수: {len(images)}, 총 라벨 수: {len(class_labels)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T16:47:10.935152Z","iopub.execute_input":"2024-11-12T16:47:10.935649Z","iopub.status.idle":"2024-11-12T16:50:51.066995Z","shell.execute_reply.started":"2024-11-12T16:47:10.935607Z","shell.execute_reply":"2024-11-12T16:50:51.065710Z"}},"outputs":[{"name":"stdout","text":"Class 0에 대한 파일 수: 2489\n","output_type":"stream"},{"name":"stderr","text":"Processing class 0: 100%|██████████| 2489/2489 [00:24<00:00, 101.96it/s]\n","output_type":"stream"},{"name":"stdout","text":"Class 1에 대한 파일 수: 2267\n","output_type":"stream"},{"name":"stderr","text":"Processing class 1: 100%|██████████| 2267/2267 [00:22<00:00, 102.90it/s]\n","output_type":"stream"},{"name":"stdout","text":"Class 2에 대한 파일 수: 2317\n","output_type":"stream"},{"name":"stderr","text":"Processing class 2: 100%|██████████| 2317/2317 [00:22<00:00, 105.04it/s]\n","output_type":"stream"},{"name":"stdout","text":"Class 3에 대한 파일 수: 2346\n","output_type":"stream"},{"name":"stderr","text":"Processing class 3: 100%|██████████| 2346/2346 [00:22<00:00, 103.33it/s]\n","output_type":"stream"},{"name":"stdout","text":"Class 4에 대한 파일 수: 2326\n","output_type":"stream"},{"name":"stderr","text":"Processing class 4: 100%|██████████| 2326/2326 [00:21<00:00, 105.86it/s]\n","output_type":"stream"},{"name":"stdout","text":"Class 5에 대한 파일 수: 2312\n","output_type":"stream"},{"name":"stderr","text":"Processing class 5: 100%|██████████| 2312/2312 [00:22<00:00, 102.94it/s]\n","output_type":"stream"},{"name":"stdout","text":"Class 6에 대한 파일 수: 2325\n","output_type":"stream"},{"name":"stderr","text":"Processing class 6: 100%|██████████| 2325/2325 [00:22<00:00, 101.18it/s]\n","output_type":"stream"},{"name":"stdout","text":"Class 7에 대한 파일 수: 2002\n","output_type":"stream"},{"name":"stderr","text":"Processing class 7: 100%|██████████| 2002/2002 [00:18<00:00, 107.56it/s]\n","output_type":"stream"},{"name":"stdout","text":"Class 8에 대한 파일 수: 1911\n","output_type":"stream"},{"name":"stderr","text":"Processing class 8: 100%|██████████| 1911/1911 [00:18<00:00, 104.01it/s]\n","output_type":"stream"},{"name":"stdout","text":"Class 9에 대한 파일 수: 2129\n","output_type":"stream"},{"name":"stderr","text":"Processing class 9: 100%|██████████| 2129/2129 [00:20<00:00, 102.89it/s]\n","output_type":"stream"},{"name":"stdout","text":"총 이미지 수: 22424, 총 라벨 수: 22424\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"**Train Validation split(Train 0.8, Test 0.2)**","metadata":{}},{"cell_type":"code","source":"# numpy 배열로 변환\nimages = np.array(images)\nclass_labels = np.array(class_labels)\n\n# Train, Validation 데이터 분할\nX_train, X_val, y_train, y_val = train_test_split(images, class_labels, test_size=0.2, random_state=42)\ny_train = to_categorical(y_train, 10)  # One-hot encoding\ny_val = to_categorical(y_val, 10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T16:53:41.365733Z","iopub.execute_input":"2024-11-12T16:53:41.366659Z","iopub.status.idle":"2024-11-12T16:53:44.964659Z","shell.execute_reply.started":"2024-11-12T16:53:41.366590Z","shell.execute_reply":"2024-11-12T16:53:44.963415Z"}},"outputs":[],"execution_count":6},{"cell_type":"markdown","source":"# ==============================================================","metadata":{}},{"cell_type":"markdown","source":"**Model 1: AlexNet**","metadata":{}},{"cell_type":"code","source":"# AlexNet 모델 정의\ndef AlexNet():\n    model = Sequential([\n        Conv2D(96, (11, 11), strides=(4, 4), activation='relu', input_shape=(100, 100, 3)),\n        MaxPooling2D(pool_size=(3, 3), strides=(2, 2)),\n\n        Conv2D(256, (5, 5), padding='same', activation='relu'),\n        MaxPooling2D(pool_size=(3, 3), strides=(2, 2)),\n\n        Conv2D(384, (3, 3), padding='same', activation='relu'),\n        Conv2D(384, (3, 3), padding='same', activation='relu'),\n        Conv2D(256, (3, 3), padding='same', activation='relu'),\n        MaxPooling2D(pool_size=(3, 3), strides=(2, 2)),\n\n        Flatten(),\n        Dense(4096, activation='relu'),\n        Dropout(0.5),\n        Dense(4096, activation='relu'),\n        Dropout(0.5),\n        Dense(10, activation='softmax')\n    ])\n    return model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T16:53:57.122779Z","iopub.execute_input":"2024-11-12T16:53:57.123230Z","iopub.status.idle":"2024-11-12T16:53:57.132687Z","shell.execute_reply.started":"2024-11-12T16:53:57.123186Z","shell.execute_reply":"2024-11-12T16:53:57.131267Z"}},"outputs":[],"execution_count":7},{"cell_type":"markdown","source":"**Model Train - AlexNet** ","metadata":{}},{"cell_type":"code","source":"# 모델 컴파일 및 학습\nmodel = AlexNet()\nmodel.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=['accuracy'])\nhistory = model.fit(X_train, y_train, epochs=1, batch_size=64, validation_data=(X_val, y_val))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T16:54:01.318715Z","iopub.execute_input":"2024-11-12T16:54:01.319944Z","iopub.status.idle":"2024-11-12T16:58:50.871627Z","shell.execute_reply.started":"2024-11-12T16:54:01.319892Z","shell.execute_reply":"2024-11-12T16:58:50.861941Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m281/281\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m285s\u001b[0m 1s/step - accuracy: 0.1036 - loss: 2.3401 - val_accuracy: 0.1032 - val_loss: 2.2998\n","output_type":"stream"}],"execution_count":8},{"cell_type":"markdown","source":"**Model summary - AlexNet**","metadata":{}},{"cell_type":"code","source":"model.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T16:59:02.872200Z","iopub.execute_input":"2024-11-12T16:59:02.872789Z","iopub.status.idle":"2024-11-12T16:59:02.916145Z","shell.execute_reply.started":"2024-11-12T16:59:02.872711Z","shell.execute_reply":"2024-11-12T16:59:02.915048Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m23\u001b[0m, \u001b[38;5;34m23\u001b[0m, \u001b[38;5;34m96\u001b[0m)     │        \u001b[38;5;34m34,944\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m11\u001b[0m, \u001b[38;5;34m11\u001b[0m, \u001b[38;5;34m96\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m11\u001b[0m, \u001b[38;5;34m11\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m614,656\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m256\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m384\u001b[0m)      │       \u001b[38;5;34m885,120\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_3 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m384\u001b[0m)      │     \u001b[38;5;34m1,327,488\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_4 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m256\u001b[0m)      │       \u001b[38;5;34m884,992\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_2 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m, \u001b[38;5;34m2\u001b[0m, \u001b[38;5;34m256\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4096\u001b[0m)           │     \u001b[38;5;34m4,198,400\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4096\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4096\u001b[0m)           │    \u001b[38;5;34m16,781,312\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4096\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │        \u001b[38;5;34m40,970\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">23</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">23</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">96</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">34,944</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">96</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">614,656</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">384</span>)      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">885,120</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">384</span>)      │     <span style=\"color: #00af00; text-decoration-color: #00af00\">1,327,488</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">884,992</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4096</span>)           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">4,198,400</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4096</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4096</span>)           │    <span style=\"color: #00af00; text-decoration-color: #00af00\">16,781,312</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4096</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">40,970</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m74,303,648\u001b[0m (283.45 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">74,303,648</span> (283.45 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m24,767,882\u001b[0m (94.48 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">24,767,882</span> (94.48 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Optimizer params: \u001b[0m\u001b[38;5;34m49,535,766\u001b[0m (188.96 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Optimizer params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">49,535,766</span> (188.96 MB)\n</pre>\n"},"metadata":{}}],"execution_count":9},{"cell_type":"markdown","source":"**Confusion Matrix - AlexNet**","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ny_val_pred = model.predict(X_val)\ny_val_pred_classes = np.argmax(y_val_pred, axis=1)\ny_val_true = np.argmax(y_val, axis=1)\ncm = confusion_matrix(y_val_true, y_val_pred_classes)\n\nplt.figure(figsize=(10, 8))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=range(10), yticklabels=range(10))\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')\nplt.title('Confusion Matrix')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T16:59:07.059837Z","iopub.execute_input":"2024-11-12T16:59:07.060305Z","iopub.status.idle":"2024-11-12T16:59:23.922752Z","shell.execute_reply.started":"2024-11-12T16:59:07.060265Z","shell.execute_reply":"2024-11-12T16:59:23.921430Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m141/141\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 105ms/step\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 2 Axes>","image/png":""},"metadata":{}}],"execution_count":10},{"cell_type":"markdown","source":"Loading Test Data","metadata":{}},{"cell_type":"code","source":"# 제출용 테스트 데이터 예측\ntest_images = []\nimage_ids = []\n\nfor filename in tqdm(os.listdir(test_path), desc='Processing test images'):\n    image_path = os.path.join(test_path, filename)\n    img = cv2.imread(image_path)\n    if img is None:\n        print(f\"이미지를 불러올 수 없습니다: {image_path}\")\n        continue\n\n    img = cv2.resize(img, (100, 100)) / 255.0  # Normalize to 0-1\n    test_images.append(img)\n    image_ids.append(filename)\n\n# numpy 배열로 변환\ntest_images = np.array(test_images)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T16:59:42.231034Z","iopub.execute_input":"2024-11-12T16:59:42.231879Z"}},"outputs":[{"name":"stderr","text":"Processing test images:   4%|▎         | 2935/79726 [00:36<16:38, 76.94it/s]","output_type":"stream"}],"execution_count":null},{"cell_type":"markdown","source":"Creating Submission File","metadata":{}},{"cell_type":"code","source":"# 예측 수행\ntest_predictions = model.predict(test_images)\npredicted_classes = np.argmax(test_predictions, axis=1)\n\n# 제출 파일 생성\nsubmission = pd.DataFrame({\n    'img': image_ids,\n    'label': predicted_classes\n})\nsubmission.to_csv('submission.csv', index=False)\nprint(\"Submission file created: submission.csv\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# ==============================================================","metadata":{}},{"cell_type":"markdown","source":"**Model 2: VGGNET**","metadata":{}},{"cell_type":"markdown","source":"# ==============================================================","metadata":{}},{"cell_type":"markdown","source":"**Model 3: ResNet**","metadata":{}},{"cell_type":"markdown","source":"# ==============================================================","metadata":{}},{"cell_type":"markdown","source":"**Model 4: GoogLeNet**","metadata":{}}]}